#version 330 core

/*
 * This shader contains levels for brightness, contrast, saturation, hue.
 * Additionally, it provides gamma correction and HDR tone mapping
 */

uniform sampler2D u_texture0;

uniform float u_brightness = 0.0;
uniform float u_contrast = 1.0;
uniform float u_saturation = 1.0;
uniform float u_hue = 1.0;
uniform float u_gamma = 2.2;
uniform float u_exposure = 2.5;

in vec2 v_texCoords;
out vec4 fragColor;

float luminance(vec3 color){
    return dot(color, vec3(0.2126, 0.7152, 0.0722));
}

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main() {
    vec3 pixelColor = texture(u_texture0, v_texCoords).rgb;

    float luma = luminance(pixelColor);

    // Apply contrast
    pixelColor = ((pixelColor - 0.5) * max(u_contrast, 0.0)) + 0.5;

    vec3 hsv = rgb2hsv(pixelColor);
    // Apply saturation
    hsv.y *= u_saturation;
    // Apply hue
    hsv.x *= u_hue;

    pixelColor = hsv2rgb(hsv);

    // Apply brightness
    pixelColor += u_brightness;

    // HDR tone mapping
    if(u_exposure > 0.0)
        pixelColor = 1.0 - exp2(-pixelColor * u_exposure);

    // Gamma correction
    pixelColor = pow(pixelColor, vec3(1.0 / u_gamma));

    // Final color
    fragColor = vec4(pixelColor, 1.0);

    // Saturation in red
    //if(brightness(fragColor) > 1.0){
    //    fragColor = vec4(1, 0, 0, 1);
    //}
}