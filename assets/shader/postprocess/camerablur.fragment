/*******************************************************************************
 * Copyright 2012 bmanuel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
#version 330 core

uniform sampler2D u_texture0;// scene
uniform sampler2D u_texture1;// depthmap
uniform mat4 u_viewProjInv;
uniform mat4 u_prevViewProj;
uniform mat4 u_ctp;
uniform mat4 u_invProj;
uniform float u_near, u_far, u_k;
uniform vec2 u_viewport;
uniform float u_blurScale;
uniform int u_blurPasses;

in vec2 v_texCoords;

layout (location = 0) out vec4 fragColor;

#include shader/lib_logdepthbuff.glsl

vec3 get_eye_normal(){
    vec2 frag_coord = gl_FragCoord.xy / u_viewport;
    frag_coord = (frag_coord - 0.5) * 2.0;
    vec4 device_normal = vec4(frag_coord, 0.0, 1.0);
    return normalize((u_invProj * device_normal).xyz);
}

void main() {


    // Get z from depth buffer
    vec3 depth = texture(u_texture1, v_texCoords).xyz;
    float w = recoverWValue(depth.r, u_far, u_k);

    vec3 eye_ray = get_eye_normal();
    float eye_depth = 1.0/w;

    vec4 current = vec4(eye_ray * eye_depth, 1.0);
    vec4 previous = u_ctp * current;
    previous.xyz /= previous.w;
    previous.xy = previous.xy * 0.5 + 0.5;

    vec2 velocity = (previous.xy - v_texCoords) * 0.5 * u_blurScale;

    // blur pass
    vec3 result = vec3(0.0);
    float oneOnNumPasses = 1.0 / float(u_blurPasses);

    for (int i = 0; i < u_blurPasses; ++i) {
        // make offset in [-0.5, 0.5] range
        float scale = (float(i) * oneOnNumPasses) - 0.5;
        vec2 offset = scale * velocity;
        result += texture(u_texture0, v_texCoords + offset).xyz;
    }

    fragColor = vec4(result * oneOnNumPasses, 1.0);

    if (v_texCoords.x < 0.5)
        fragColor = vec4(depth, 1.0);
}